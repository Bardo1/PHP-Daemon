#!/usr/bin/php
<?php
/**
 * A simple console that lets you view and interact with a shared memory address
 * Use the shortcut $addresses array to store commonly-attached memory addresses
 * @author Shane Harter
 * @todo A "watch" command that will log all memory block changes by doing a scan, array_diff()'ing keys, and possibly even comparing hashes of values
 */

define('BASE_PATH', dirname(dirname(__FILE__)));

// Memory addresses are generated by the daemon using the current path of the daemon and the name of the worker alias
// As long as those things stay the same the address will stay the same, so you can save them here as shortcuts.
$addresses = array(
    'PrimeNumbers'    =>  1342197841,
    'GetFactors'      =>  1191202898,
);


$index = array_keys($addresses);
$string = '';
foreach($index as $id => $key) {
    $string .= sprintf('%s [-%s] %s%s%s', PHP_EOL, $id, $key, "\t", $addresses[$key]);
}

echo PHP_EOL, "PHP Simple Daemon - Shared Memory Console";
echo PHP_EOL, "Enter Shared Memory Address";
if ($string)
    echo " or Select a Shortcut:", $string;
echo PHP_EOL;
echo PHP_EOL, "Hint: To determine the address used by a worker, send a `10` signal to your daemon. It will be a 10 digit number beside the worker's alias";
echo PHP_EOL;
echo PHP_EOL;


stream_set_blocking(STDIN, 0);
$address        = false;
$input          = '';
$macro_input    = '';
$prompt         = true;
$header_exists  = true;

function out($out)
{
    echo $out, PHP_EOL;
}

function macro($id) {
    global $input, $macro_input, $prompt, $address;
    if ($macro_input)
        $macro_input = '';

    switch($id){
        case 1:
            // Macro 1 reads an optional Address from a address-reset command.
            // Example:   ID > addr 12345    The current address will be released and this macro will pull 12345 out and set
            //                               it as the new address.
            $arg = @func_get_arg(1);
            if (!$arg || strlen(trim($arg)) < 4)
                return;

            $macro_input = trim(str_replace('addr', '', $arg));
            break;

        case 2:
            // Macro 2 takes a saved address from the addresses array and reads it into $input
            $arg = @func_get_arg(1);
            if (!$arg || !is_numeric($arg))
                return;

            $macro_input = $arg;
            break;
    }

    if ($macro_input)
        $input = '';
}

while(true) {

    // Every few iterations check to see if the header still exists (if not the memory block
    // has probably been detached and released by the daemon) If the header didn't exist when the memory
    // was attached just skip the check and let the user figure out if the memory is detached.
    if ($address && $header_exists && ($input || mt_rand(1,3) == 2) && !shm_has_var($shm, 1)) {
        out("Shared Memory Block {$address} Has Been Released");
        $prompt = true;
        $address = false;
        @shm_detach($shm);
        $shm = null;
        if (!$input)
            echo PHP_EOL;
    }

    if ($input || $prompt)
        if (!$address)
            echo "ADDR > ";
        else
            echo "ID > ";

    $prompt = false;
    if ($macro_input) {
        $input = $macro_input;
        $macro_input = '';
    } else {
        $input  = strtolower(fgets(STDIN));
    }

    $prompt = $input == "\n";
    $input  = trim($input);

    try {

        switch(true) {
            case empty($input):
                continue;

            case $input == 'exit':
                exit;

            case $address && $input == 'help':

                $out = array();
                $out[] = '';
                $out[] = 'Available Commands:';
                $out[] = 'exit';
                $out[] = 'help                Display this help';
                $out[] = 'addr [integer]      Display an ADDR prompt to enter a new Address, and optionally pass an Address to switch directly to';
                $out[] = '[integer]           A valid memory address';
                $out[] = '';

                out(implode(PHP_EOL, $out));
                continue;

            case $input == 'help':
                $out = array();
                $out[] = '';
                $out[] = 'Available Commands:';
                $out[] = 'exit';
                $out[] = 'help                Display this help';
                $out[] = '[integer]           A valid memory address';
                $out[] = '';
                $out[] = 'Shortcuts:';
                $out[] = $string;
                $out[] = '';
                $out[] = 'Shortcuts come from the $addresses array. Add your own shortcuts to make life easier.';
                $out[] = '';

                out(implode(PHP_EOL, $out));
                continue;

            case substr($input, 0, 4) == 'addr':
                if ($address) {
                    out("Releasing Address...");
                    $address = false;
                    @shm_detach($shm);
                }
                macro(1, $input);
                continue;

            case $address && substr($input, 0, 4) == 'scan':
                $out = '';
                for ($i=0; $i<100000; $i++)
                    if(shm_has_var($shm, $i))
                        $out .= " $i";

                out("Keys In Use:");
                if ($out)
                    out($out);
                else
                    out("None");
                continue;

            case $address && is_numeric($input) && $input > 0:
                out("Shared Memory Contents:");
                if (!shm_has_var($shm, $input))
                    out("Null");
                else
                    out(print_r(shm_get_var($shm, $input), true));

                continue;

            case !$address && $input <= 0 && isset($index[abs($input)]):
                $key = $index[abs($input)];
                macro(2, $addresses[$key]);
                out("Setting Address From Shortcut: " . $key);
                continue;

            case !$address && is_numeric($input) && $input > 0:
                $address = $input;
                $shm = shm_attach($input);
                $header_exists = true;
                out("Address {$input} Attached");

                // If no header is written the memory can still be attached but warn them just in case they typo'd or something
                if (!shm_has_var($shm, 1)) {
                    $header_exists = false;
                    out("Note: This shared memory address appears uninitilized: No header has been written.");
                }
                continue;

            case $address:
                throw new Exception("Invalid Key");

            default:
                throw new Exception('Invalid Input: Valid Address or Shortcut Required');
        }

    }
    catch(Exception $e)
    {
        echo $e->getMessage(), PHP_EOL, PHP_EOL;
    }

    usleep(20 * 1000);
}


