PHP-Daemon 

Create solid, long-running PHP daemon processes by extending this Core_Daemon base class. Unlike other popular daemon libraries, PHP-Daemon has a built-in timer. By setting the loop interval and providing an execute method, the library runs the while loop for you and calls your execute() method at the desired frequency. 

Crontab begins to work poorly when you have tasks that need to run every minute or two, and it has no support for running tasks every second or sub-second. Using PHP-Daemon you can run a task at any interval you require, whether that's every 10 seconds or 10 times per second.

I use this in production. It includes many features to make it durable and stable for my mission-critical uses. 

Requires: 
PHP 5.3 or Higher
POSIX and PCNTL Extensions for PHP


Notable Features: 

* Built-In while() loop and micro-time timer. 
Example: You set "->loop_interval=1". The PHP-Daemon will call your execute() method and time it. Suppose it takes 0.2 seconds. Upon its completion, the timer will sleep for the remaining 8/10 second. It wakes-up and then iterates. If your execute() method does not return before the end of the loop_interval (1 second in this case), an error will be logged. But since the execute() method is blocking, the next iteration will not begin until the first is complete. 

* Braindead-Simple Forking for tasks that can be parallelized
Suppose your execute() method needed to push its results to an external API. If your interval is at 1 second you just don't have enough time to use an external resource. In these instances, PHP-Daemon provides a fork() method.  It accepts a callback (todo: a Closure). When called, it spawns a child process, executes the callback, and exits. You have to be careful, dozens of long-running, possibly hung child processes is not good. But when used carefully it gives you a very simple, very powerful tool and you don't have to worry about mastering the idiosyncrasies of PHP forking. 

https://github.com/shaneharter/PHP-Daemon/wiki/Forking-Example

* Auto Restart
No matter how diligent you are, memory bloat can occur. PHP-Daemon is able to auto-restart itself both as an attempt to recover from a fatal error, and on a user-defined interval to combat memory bloat. Only available when running in "Daemon mode" (-d at the command prompt), the built-in timer will track total runtime and when it hits the threshold you've set in the ini file, it will perform a graceful restart. 

* Signal Handling
By default PHP-Daemon listens for 3 signals: SIGINT, SIGHUP, SIGUSR1. When you send the Daemon a standard 'kill [pid]' SIGINT, it will do an graceful shutdown: It will finish the current iteration of the run loop and then shutdown. If you send a 'kill -1 [pid]' HUP command, it will trigger the auto-restart feature. And if you send a 'kill -10 [pid]' SIGUSR1, it will respond by dumping a block of runtime variables to either the log or stdout or both, depending on how you configure logging. 

* Process Locking
A lock is created when your daemon starts that will prevent additional, errant instances of the daemon from starting. Currently, File and Memcached lock providers are available. By using the Memcached lock provider you can even restrict the daemon to a single instance across a cluster of servers. 

During development, a Null lock provider can be used to emulate locking behavior without locks getting in your way. 

The locks are "self expiring" so you won't have to worry about a stale lock having to be manually removed after a crash. 
 
* Memcache Wrapper
Useful for daemons that need to store runtime details in Memcached, a small Memcache wrapper is included that implements easy namespacing and auto_retry functionality. In our high-throughput memcache environment we occasionally have an issue where memcache was blocking at that specific microsecond and a key couldn't be written. To avoid this crashing the Daemon, auto-retry functionality was added. This feature will try several times to write the key -- until it reaches the timeout you specify. 
 
* Simple Logging
By providing a filename, either staticly via the ->log_file property or dynamically by overloading the ->log_file() method, the system will keep a simple log file format, writing the timestamp, PID, and message. The PHP-Daemon system will log noteworthy events and you can easily add your own entries by calling  either the ->log($message) method or, if appropriate, the ->fatal_error($message) method. An "alert" flag can be set that will email the $message to the distribution list you define in your constructor. 
 
* Simple Config Loading
A simple Plugin loader is included, and the first plugin created will help you use and validate Ini files. This functionality was moved from the daemon core into a Plugin for the 1.1.0 release to simplify daemon core. 

* Command Line Switches
You can run a '-H' help command when you run the Daemon. It will dump a help menu that looks like this, but can be easily overridden for your daemon:

	Example_Daemon
	
	USAGE:
	 # run.php -H | [-d] [-v] [-p PID_FILE]
	
	OPTIONS:
	 -d Daemon, detach and run in the background
	 -v Verbose, echo any logged messages. Ignored in Daemon mode.
	 -H Shows this help
	 -p PID_FILE File to write process ID out to